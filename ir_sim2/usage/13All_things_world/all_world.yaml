world:
  height: 10  # the height of the world
  width: 10   # the height of the world
  step_time: 0.01  # 100Hz calculate each step
  sample_time: 0.1  # 20 Hz for render and data extraction 
  offset: [0, 0] # the offset of the world on x and y 

robots:
  type: 'robot_diff'  # # robot_omni, robot_diff, robot_acker
  number: 2

  # for number == 1
  state: [1, 1, 0]  
  radius: 0.2 # # for diff
  shape: [4.6, 1.6, 3, 1.6] # for acker
  goal: [9, 9, 0] 

  # for multiple robots number>1
  # distribute: {mode: 'circular', circle: [5, 5, 4], random_bear: False, random_shape: False, radius_low: 0.1, radius_high: 1} 
  # distribute: {mode: 'random', rlow: [0, 0, 0], rhigh: [10, 10, 3.14], distance: 1, random_shape: True, radius_low: 0.1, radius_high: 1}
  distribute: {mode: 'manual', states: [[1, 1, 0], [2, 1, 0]], shapes: [0.2, 0.2], goals: [[7, 7, 0], [7, 2, 0]], random_bear: False}

  # general propoerty
  radius_exp: 0.1  # for circle apperance
  goal_threshold: 0.1 # judge whether arrive at the goal
  vel_min: [-3, -2]   # steer, angular or v_x, v_y 
  vel_max: [3, 2]     # steer, angular or v_x, v_y 
  arrive_mode: 'position' # position, state
  vel_type: 'steer' # for acker:  'steer': linear velocity, steer angle
                                  #'angular': linear velocity, angular velocity of steer
                                  # 'simplify': linear velocity, rotation rate, do not consider the steer angle 
                    # for diff: diff: linear velocity, angular velocity
                    #           omni: v in x and y dircetion 

  # sensor
  sensor: 
    - type: 'lidar'
      id: 0
      range_min: 0
      range_max: 4
      angle_range: 3.1415926
      number: 180
      noise: True
      std: 1  # index of the lidar 
      offset: [0, 0, 0]
      reso: 0.1


obstacles:
  - type: 'obstacle_circle'
    number: 0
    distribute: 'random' # manual, random, circular, line


    dynamic: {sport: default, }
    sport: 'default' # default, wander, patrol
    sport_range: [0, 0, 10, 10]  # xmin xmax ymin ymax  (if sport 'wander')
    center_list: [[6, 4], [3, 4], [5, 4], [1, 3], [2, 5]]
    goal_list: [[4, 1], [9, 9]]
    radius_list: [0.1, 0.5]
    vel_min: [-1, -1]
    vel_max: [1, 1]
    range_low: [0.0, 0.0]     # for random distribute
    range_high: [10.0, 10.0]
    center_distance: 1
    random_radius: True
    radius_low: 0.1
    radius_high: 1

  - type: 'obstacle_polygon'
    number: 1
    distribute: 'manual' # mouse, random
    dynamic: False
    vertex_list: [ [[1, 2], [3, 1.5], [4, 3], [2, 4]], ]   # init points
    state_list: [ [3, 3, 0], ]   # transform of the points 
  
  - type: 'obstacle_block'
    number: 0
    distribute: 'random' # manual, mouse, random
    dynamic: False
    center_list: [ [4, 4, 1], [4, 5, 1] ]   # init points
    length_list: [0.5]
    width_list: [0.4]
    range_low: [0.0, 0.0, -3.14]
    range_high: [10.0, 10.0, 3.14]
    center_distance: 1
    
  
  # - type: 'obstacle_map'
  #   reso: '0.1'
  #   map_image: 'map_100_100.png'

    
    
  

